name: release

on:
  push:
    branches: [main]
  # workflow_run:
  #     workflows: ['verification']
  #     types: [completed]
  #     branches: [main]

permissions:
    id-token: write   # This is required for requesting the JWT
    contents: read    # This is required for actions/checkout
        
jobs:
  release:
    runs-on: ubuntu-latest
    # if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
      - name: build version
        id: build-version
        run: |
          base_version=$(node -p "require('./package.json').version.split('.').slice(0, 2).join('.')")
          gh api graphql -f query='query CommitRevCount{
              repository(owner:"${{ github.repository_owner }}",name:"${{ github.event.repository.name }}") {
                name
                object(oid: "${{ github.sha }}"){
                  ... on Commit {
                    message
                    id
                    history(first: 0) {
                      totalCount
                    }
                  }
                }
              }
            }' > commit_rev_count_data.json
          rev_count="$(jq -r '.data.repository.object.history.totalCount' commit_rev_count_data.json)"
          rev_time="$(git log -1 --format=%cd --date=format:%Y%m%d-%H%M%S)"
          rev_short="${GITHUB_SHA::7}"
          echo "version=$base_version.$rev_count-$rev_time-$rev_short" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}
      - name: update version in package.json
        run: |
          sed -E -i 's/(^\s*"version": ")(.*?)(",$)/\1${{ steps.build-version.outputs.version }}\3/' package.json 
          sed -E -i 's/(^\s*"version": ")(.*?)(",$)/\1${{ steps.build-version.outputs.version }}\3/' */*/package.json 
      - name: verify version
        run: |
          grep version package.json
          grep version */*/package.json
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_DEPLOY_REGION }}
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_DEPLOY_ROLE }}
      - name: Login to AWS CodeArtifact
        run: |
          aws codeartifact login --tool npm --repository test-repo --domain reactiac-test-repo --domain-owner ${{ secrets.AWS_ACCOUNT_ID }} --namespace @reactiac --region ${{ secrets.AWS_DEPLOY_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: to release
        run: |
          echo to release as 3 ${{ steps.build-version.outputs.version }}
